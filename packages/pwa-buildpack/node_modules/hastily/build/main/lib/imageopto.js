"use strict";
/**
 * Simulate the [Fastly ImageOpto](https://docs.fastly.com/api/imageopto/) API.
 * Returns a middleware which attempts to run image responses through `sharp`.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.imageopto = exports.hasSupportedExtension = void 0;
const logging_1 = require("./logging");
const mime_types_1 = __importDefault(require("mime-types"));
const sharp_1 = __importDefault(require("sharp"));
const url_1 = require("url");
const vary_1 = __importDefault(require("vary"));
const errors_1 = __importDefault(require("./errors"));
const fastly_params_1 = __importDefault(require("./fastly-params"));
const map_options_1 = __importDefault(require("./map-options"));
const splice_response_1 = __importDefault(require("./splice-response"));
const HASTILY_HEADER = {
    NAME: 'X-Optimized',
    VALUE: 'hastily',
};
const streamableFileExtensions = new Set(Object.keys(sharp_1.default.format).filter((ext) => sharp_1.default.format[ext].input.stream));
// plus the one sharp doesn't mention outright, the alias to jpeg...
streamableFileExtensions.add('jpg');
// minus SVGs, which are widely supported in 2019 and we should not rasterize
streamableFileExtensions.delete('svg');
const imageExtensionRE = new RegExp(`\\.(?:${[...streamableFileExtensions].join('|')})$`);
/**
 * Use the `sharp.format` manifest to determine if the current request's file
 * extension matches a format that sharp can stream in to optimize.
 * @param req {Request}
 */
exports.hasSupportedExtension = (req) => imageExtensionRE.test(req.path);
/**
 * Returns a new imageopto middleware for use in Express `app.use()`.
 * Won't do anything if the Express app isn't already serving images!
 *
 */
function imageopto(filterOrOpts) {
    const options = {
        filter: exports.hasSupportedExtension,
        force: false,
    };
    if (typeof filterOrOpts === 'function') {
        options.filter = filterOrOpts;
    }
    else if (typeof filterOrOpts === 'object') {
        options.filter = filterOrOpts.filter || options.filter;
        options.force = filterOrOpts.force;
        options.errorLog = options.quiet ? (_) => void 0 : filterOrOpts.errorLog;
    }
    const constructorLog = logging_1.createLogger('middleware');
    constructorLog.debug('creating new middleware');
    if (options.filter === exports.hasSupportedExtension) {
        constructorLog.debug('middleware filtering req.path for %s', imageExtensionRE.source);
    }
    const requestLog = logging_1.createLogger('request');
    return function hastily(req, res, next) {
        const reqLog = requestLog.child({ req });
        if (!options.filter(req)) {
            reqLog.debug('did not pass supplied filter function');
            return next();
        }
        splice_response_1.default(req, res, next, () => {
            // determine if the entity should be transformed
            if (!shouldTransform(req, res, reqLog, options)) {
                return false;
            }
            reqLog.debug('hastily will handle this image by transforming the response through sharp');
            vary_1.default(res, 'Accept');
            res.setHeader(HASTILY_HEADER.NAME, HASTILY_HEADER.VALUE);
            // image opto stream
            const params = new fastly_params_1.default(new Map(new url_1.URLSearchParams(req.query).entries()), req, res);
            const sharpStream = sharp_1.default();
            const emitSharpError = (error) => {
                if (options.errorLog) {
                    options.errorLog(error);
                }
                else {
                    reqLog.error('Image processing failed: %s', error.toString());
                }
            };
            sharpStream.on('error', emitSharpError);
            try {
                const transformStream = map_options_1.default(params, sharpStream);
                const warnings = params.getWarnings();
                if (warnings.length > 0) {
                    const requestErrors = new errors_1.default(req.url, warnings);
                    if (options.errorLog) {
                        options.errorLog(requestErrors);
                    }
                    else {
                        reqLog.warn(requestErrors.toString());
                    }
                }
                reqLog.debug('mapped options and created sharp stream');
                return transformStream;
            }
            catch (e) {
                emitSharpError(e);
                return false;
            }
        });
    };
}
exports.imageopto = imageopto;
const cacheControlNoTransformRegExp = /(?:^|,)\s*?no-transform\s*?(?:,|$)/;
/**
 * Determine if the entity should be transformed.
 * @private
 */
function shouldTransform(req, res, reqLog, options) {
    if (req.method !== 'GET') {
        reqLog.debug('no transform: request method must be GET but is %s', req.method);
        return false;
    }
    if (res.statusCode > 299 || res.statusCode < 200) {
        reqLog.debug('no transform: res.statusCode must be 2xx but is %s', res.statusCode);
        return false;
    }
    const cacheControl = res.getHeader('Cache-Control');
    // Don't optimize for Cache-Control: no-transform
    // https://tools.ietf.org/html/rfc7234#section-5.2.2.4
    if (cacheControl &&
        cacheControlNoTransformRegExp.test(cacheControl.toString())) {
        reqLog.debug('no transform: cache control header: "%s"', cacheControl);
        return false;
    }
    if (!options.force) {
        // Don't optimize if we've already done it somewhere
        const hastilyHeader = res.getHeader(HASTILY_HEADER.NAME);
        if (hastilyHeader === HASTILY_HEADER.VALUE) {
            reqLog.warn('no transform: header %o, hastily alrady transformed this earlier', HASTILY_HEADER);
            return false;
        }
        // Don't optimize if Fastly has already done it for us
        const fastlyHeader = res.getHeader('fastly-io-info');
        if (fastlyHeader) {
            reqLog.debug('no transform: fastly already transformed according to fastly-io-info header: "%s"', fastlyHeader);
            return false;
        }
    }
    const contentType = res.getHeader('content-type');
    const extension = mime_types_1.default.extension(contentType);
    if (!extension) {
        reqLog.error('no transform: no valid content-type could not be detected');
        return false;
    }
    const sharpFormatCapabilities = sharp_1.default.format[extension];
    if (!sharpFormatCapabilities || !sharpFormatCapabilities.input.stream) {
        reqLog.error('no transform: sharp does not support input of type "%s"', contentType);
        return false;
    }
    const contentEncoding = res.getHeader('content-encoding');
    if (contentEncoding &&
        typeof contentEncoding === 'string' &&
        contentEncoding.trim()) {
        reqLog.error('no transform: image is compressed with content-encoding "%s"; hastily does not support decompressing images. The server *should not* be compressing images! HTTP content encoding is only recommended for text documents. Binary files will not get smaller, and may evem get larger!');
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VvcHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9pbWFnZW9wdG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBRUgsdUNBQXlDO0FBRXpDLDREQUE4QjtBQUM5QixrREFBMEM7QUFDMUMsNkJBQXNDO0FBQ3RDLGdEQUF3QjtBQUN4QixzREFBcUM7QUFDckMsb0VBQTJDO0FBUzNDLGdFQUF1QztBQUN2Qyx3RUFBdUM7QUFvQnZDLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLElBQUksRUFBRSxhQUFhO0lBQ25CLEtBQUssRUFBRSxTQUFTO0NBQ2pCLENBQUM7QUFFRixNQUFNLHdCQUF3QixHQUFHLElBQUksR0FBRyxDQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQzlCLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxlQUFLLENBQUMsTUFBTSxDQUFDLEdBQXVCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUM1RCxDQUNGLENBQUM7QUFDRixvRUFBb0U7QUFDcEUsd0JBQXdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLDZFQUE2RTtBQUM3RSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLE1BQU0sQ0FDakMsU0FBUyxDQUFDLEdBQUcsd0JBQXdCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDckQsQ0FBQztBQUVGOzs7O0dBSUc7QUFDVSxRQUFBLHFCQUFxQixHQUFrQixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQzFELGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFbEM7Ozs7R0FJRztBQUNILFNBQWdCLFNBQVMsQ0FDdkIsWUFBOEM7SUFFOUMsTUFBTSxPQUFPLEdB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